import { useEffect, useState } from 'react';
import { useParams } from 'react-router-dom';
import NavBar from '../components/NavBar';

const AnswerPage = () => {
    const { word } = useParams();
    const [data, setData] = useState(null);
    const [suggestions, setSuggestions] = useState(null);

    useEffect(() => {
        fetch(`/api/words/${word}`)
            .then(response => response.json())
            .then(data => {
                console.log(data);
                setData(data); // The response is an array, so we take the first element
            });

        fetch(`/api/suggestion/${word}`)
            .then(response => response.json())
            .then(data => {
                console.log(data);
                setSuggestions(data); // Set the state to the entire data array
            });

        fetch(`/api/addlookup/${word}`)
            .then(response => response.json())
            .then(data => console.log(data))
            .catch((error) => {
                console.error('Error:', error);
            });
    }, [word]);

    return (
        <div className='answer-page'>
            <NavBar logoHide={false} />
            <div className='title-bg'>
                <h1>Searched Word : {word}</h1>
            </div>
            <div className='answer-data'>
                <div className='dict'>
                    {data && (
                         <div className='data'>
                         {data.error ? (
                           <h2 className='error'>{data.error}</h2>
                         ) : (
                           Object.keys(data.synsets).map((pos) => (
                             <div className='main-item' key={pos}>
                              {data.synsets[pos].length > 0 ? (
                                <h1>
                                  <div className="centered-content">
                                    {word} <span className={`pos-${pos}`}>{pos}</span>
                                  </div>
                                  </h1>
                                ) : null}
                               {data.synsets[pos].map((synset, index) => (
                                 <div key={index} className='synset'>
                                  <h1>{`${index+1}. ${pos.charAt(0).toUpperCase() + pos.slice(1)}`}</h1>
                                  <div id='def'>
                                    <p id='title'><strong>Definition:</strong></p>
                                    <p id='data'>{synset.definition}</p>
                                  </div>
                                   {synset.examples.length > 0 && (
                                     <div id='ex'>
                                       <p id='title'><strong>Examples:</strong></p>
                                       <ul id='data'>
                                         {synset.examples.map((example, i) => (
                                           <li key={i}>{`⦿  ${example}`}</li>
                                         ))}
                                       </ul>
                                     </div>
                                   )}
                                   {synset.synonyms.length > 0 && (
                                     <div id='syn'>
                                       <p id='title'><strong>Synonyms:</strong></p>
                                       <p id='data'>{synset.synonyms.join(', ')}</p>
                                       {/* <ul>
                                         {synset.synonyms.map((synonym, i) => (
                                           <li key={i}>{synonym}</li>
                                         ))}
                                       </ul> */}
                                     </div>
                                   )}
                                   {synset.antonyms.length > 0 && (
                                     <div id='ant'>
                                      <p id='title'><strong>Antonyms:</strong></p>
                                      <p id='data'>{synset.antonyms.join(', ')}</p>
                                     </div>
                                   )}
                                 </div>
                               ))}
                             </div>
                           ))
                         )}
                       </div>
                    )}
                </div>

                {suggestions &&
                    <div className='context'>
                        <h2 className='heading'>Generated by AI ✨</h2>
                        <h2>Contextual Suggestions for  : {word}</h2>
                        {suggestions.map((suggestion, index) => (
                            <div id='item-title' key={index}>
                                <h3>{suggestion.title} : </h3>
                                <div id='items'>
                                    <p>{suggestion['example words'].join(', ')}</p>
                                </div>
                            </div>
                        ))}
                    </div>
                }
            </div>
        </div>
    );
}

export default AnswerPage;


{/* <h2 className='meaning-title'>Meanings : </h2>
                            {data.meanings.map((meaning, index) => (
                                <div id='def' key={index}>
                                    <h3>{word} <span id='span-item'>{meaning.partOfSpeech}</span></h3>
                                    {meaning.definitions.map((definition, index) => (
                                        <div id='item' key={index} >
                                            <p>⦿ {definition.definition}</p>
                                            {definition.example && <p><strong>Example:</strong> {definition.example}</p>}
                                            {definition.synonyms.length > 0 && <p>Synonyms : {definition.synonyms.join(', ')}</p>}
                                            {definition.antonyms.length > 0 && <p>Antonyms : {definition.antonyms.join(', ')}</p>}
                                        </div>
                                    ))}
                                    <div id='syn-ant'>
                                        {meaning.synonyms.length > 0 && <p><span style={{ color: "hsl(175, 80%, 31%)" }}><strong>Synonyms : </strong></span> {meaning.synonyms.join(', ')}</p>}
                                        {meaning.antonyms.length > 0 && <p><span style={{ color: "hwb(6 16% 19%)" }}><strong>Antonyms : </strong></span> {meaning.antonyms.join(', ')}</p>}
                                    </div>
                                </div>
                            ))} */}